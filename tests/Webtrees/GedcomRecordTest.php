<?php
namespace MyArtJaub\Tests\Webtrees;

use \Mockery as m;

use \MyArtJaub\Webtrees\GedcomRecord;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-06 at 12:14:57.
 */
class GedcomRecordTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \MyArtJaub\Webtrees\GedcomRecord $object
     */
    protected $object;

    protected static $tree_mock;
    
    /** @var \Fisharebest\Webtrees\GedcomRecord $gedcomrecord */
    protected static $gedcomrecord;
    protected static $gedcomrecord_mock;    
    /** @var string $gedcomrecord_ged*/
    protected static $gedcomrecord_ged;
    /** @var string $gedcomrecord_xref*/
    protected static $gedcomrecord_xref = 'I123';
    
    public static function setUpBeforeClass()
    {
    	self::$tree_mock = m::mock('\Fisharebest\Webtrees\Tree');
    	//self::$tree_mock->shouldReceive('getPreference')->with('HIDE_LIVE_PEOPLE')->andReturn(false);
    	self::$tree_mock->shouldReceive('getFactPrivacy')->andReturn(array());
    	self::$tree_mock->shouldReceive('getIndividualFactPrivacy')->andReturn(array());

    	self::$gedcomrecord_ged = '0 @'.self::$gedcomrecord_xref.'@ INDI'. "\n" .
    	'1 BIRT'. "\n" .'2 DATE 2 JUN 1795'. "\n" .'2 PLAC place1, place2'. "\n" .
    	'1 DEAT'. "\n" .'2 PLAC place3'. "\n" .'1 SOUR'. "\n" .'2 _ACT place1/acte1.jpg'. "\n" .
		'1 DEAT'. "\n" .'2 PLAC place3'. "\n" .'1 SOUR'. "\n" .'2 _ACT place1/acte1.jpg'. "\n" .
		'1 CREM'. "\n" .'2 DATE 5 DEC 1838'. "\n". '1 SOUR'. "\n" .'2 _ACT place1/acte_crem.jpg'. "\n" .		
		'1 FCOM'. "\n" .'2 DATE 12 MAR 1809'. "\n". '2 PLAC place4,place1'. "\n" .'1 SOUR TestSource'. "\n" .'2 QUAY 3'. "\n" .
		'1 CHRA'. "\n" .'2 DATE 25 JAN 1799'. "\n". '2 PLAC place1'. "\n" .'1 SOUR TestSource'. "\n" .'2 QUAY 3'. "\n" .
		'1 CHRA'. "\n" .'2 DATE 27 JAN 1799'. "\n". '2 PLAC place1'. "\n" .
		'1 ORDN'. "\n" .'2 DATE 17 SEP 1824'. "\n". '2 PLAC place3'. "\n" .'1 SOUR'. "\n" .'2 _ACT place1/1824.09.18 D acte_crem.jpg'. "\n" .		
		'1 GRAD'. "\n" .'2 DATE 1816'. "\n";
    	self::$gedcomrecord = new \Fisharebest\Webtrees\GedcomRecord(
    			self::$gedcomrecord_xref, 
    			self::$gedcomrecord_ged, 
    			str_replace('place2', 'place5', self::$gedcomrecord_ged), 
    			self::$tree_mock
    		);   
    	
    	self::$gedcomrecord_mock = m::mock(self::$gedcomrecord);
    	self::$gedcomrecord_mock->shouldReceive('getFacts')->andReturnUsing(function($fact){
    		return self::$gedcomrecord->getFacts($fact, false, \Fisharebest\Webtrees\Auth::PRIV_HIDE);
    	});
    		
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new GedcomRecord(self::$gedcomrecord_mock);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }    

    public function testClassExists() {
    	$this->assertTrue(class_exists('\MyArtJaub\Webtrees\GedcomRecord'));
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::getDerivedRecord
     */
    public function testGetDerivedRecord()
    {		
    	$this->assertInstanceOf('\Fisharebest\Webtrees\GedcomRecord', $this->object->getDerivedRecord());
		$this->assertEquals(self::$gedcomrecord_xref, $this->object->getDerivedRecord()->getXref());	
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::isNewAddition
     */
    public function testIsNewAddition()
    {    	
    	$this->assertFalse($this->object->isNewAddition());
    	
    	//$gedcomrecord_new_mock = m::mock('\Fisharebest\Webtrees\GedcomRecord', array('I456', null, '1 BIRT Y', self::$tree_mock));
    	$gedcomrecord_new = new \Fisharebest\Webtrees\GedcomRecord('I456', null, '1 BIRT Y', self::$tree_mock);
    	$dnewgedrec = new \MyArtJaub\Webtrees\GedcomRecord($gedcomrecord_new);
    	
    	$this->assertTrue($dnewgedrec->isNewAddition());    	
    }
    
    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::formatFirstMajorFact
     * @dataProvider providerFormatFirstMajorFactWithInvalidArguments
     */
    public function testFormatFirstMajorFactWithInvalidArguments($facts, $style)
    {        
        $this->assertEmpty($this->object->formatFirstMajorFact($facts, $style));
    }
    
    public function providerFormatFirstMajorFactWithInvalidArguments() 
    {
        return array(
            array('', 1),
            array('', 10),
            array('', 15),
            array('BIRT', 15),
            array('RESI', 10),
            array('DEAT', 10),
            array('GRAD', 10),
            
        );
    }    
    
    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::formatFirstMajorFact
     */
    public function testFormatFirstMajorFactWithCustomShortStyle()
    {    
        $this->assertEquals('<i>Birth 1795&nbsp;place1</i>', $this->object->formatFirstMajorFact('BIRT', 10));
    }
    
    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::formatFirstMajorFact
     */
    public function testFormatFirstMajorFactWithStandardStyles()
    {
        $this->assertEquals(self::$gedcomrecord_mock->formatFirstMajorFact('BIRT', 1), $this->object->formatFirstMajorFact('BIRT', 1));
        $this->assertEquals(self::$gedcomrecord_mock->formatFirstMajorFact('BIRT', 2), $this->object->formatFirstMajorFact('BIRT', 2));
    }    
    
    
    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::canDisplayIsSourced
     * @todo   Implement testCanDisplayIsSourced().
     */
    public function testCanDisplayIsSourced()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::isSourced
     * @todo add cases which returns -1 and 1
     */
    public function testIsSourced()
    {
    	$this->assertEquals(2, $this->object->isSourced());
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::isFactSourced
     * @dataProvider providerIsFactSourced 
     */
    public function testIsFactSourced($input, $expectedResult)
    {        
        $this->assertEquals($expectedResult, $this->object->isFactSourced($input));
    }
    
    public function providerIsFactSourced() {
        return array(
            array(null, 0),
            array('', 0),
            array('RESI', 0),
            array('DEAT', 0),
            array('GRAD', -1),
            array('BIRT', -1),
            array('BIRT|GRAD', -1),
            array('BIRT|GRAD|RESI', -1),
            array('FCOM', 1),
            array('CHRA', 1),
            array('CREM', 2),
            array('BIRT|CREM', 2),
            array('ORDN', 3),
        );
    }
    
    
}
