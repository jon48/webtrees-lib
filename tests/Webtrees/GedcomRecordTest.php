<?php
namespace MyArtJaub\Tests\Webtrees;

use \Mockery as m;

use \MyArtJaub\Webtrees\GedcomRecord;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2015-09-06 at 12:14:57.
 */
class GedcomRecordTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var GedcomRecord $object
     */
    protected $object;

    protected static $tree_mock;
    
    /** @var \Fisharebest\Webtrees\GedcomRecord $gedcomrecord */
    protected static $gedcomrecord;
    protected static $gedcomrecord_mock;    
    /** @var string $gedcomrecord_ged*/
    protected static $gedcomrecord_ged;
    /** @var string $gedcomrecord_xref*/
    protected static $gedcomrecord_xref = 'I123';
    
    public static function setUpBeforeClass()
    {
    	self::$tree_mock = m::mock('\Fisharebest\Webtrees\Tree');
    	//self::$tree_mock->shouldReceive('getPreference')->with('HIDE_LIVE_PEOPLE')->andReturn(false);
    	self::$tree_mock->shouldReceive('getFactPrivacy')->andReturn(array());
    	self::$tree_mock->shouldReceive('getIndividualFactPrivacy')->andReturn(array());

//     	self::$gedcomrecord_ged = '0 @'.self::$gedcomrecord_xref.'@ INDI'. .
//     		'1 BIRT'. PHP_EOL .'2 DATE 2 JUN 1795'. PHP_EOL .'2 PLAC place1, place2'. PHP_EOL .
//     		'2 DEAT'. PHP_EOL .'2 PLAC place3'. PHP_EOL .'1 SOUR'. PHP_EOL .'2_ACT place1/acte1.jpg'
//     	;
    	self::$gedcomrecord_ged = '0 @'.self::$gedcomrecord_xref.'@ INDI'. "\n" .
    	'1 BIRT'. "\n" .'2 DATE 2 JUN 1795'. "\n" .'2 PLAC place1, place2'. "\n" .
    	'1 DEAT'. "\n" .'2 PLAC place3'. "\n" .'1 SOUR'. "\n" .'2 _ACT place1/acte1.jpg';
    	self::$gedcomrecord = new \Fisharebest\Webtrees\GedcomRecord(
    			self::$gedcomrecord_xref, 
    			self::$gedcomrecord_ged, 
    			str_replace('place2', 'place5', self::$gedcomrecord_ged), 
    			self::$tree_mock
    		);   
    	
    	self::$gedcomrecord_mock = m::mock(self::$gedcomrecord);
    	self::$gedcomrecord_mock->shouldReceive('getFacts')->andReturnUsing(function($fact){
    		return self::$gedcomrecord->getFacts($fact, false, \Fisharebest\Webtrees\Auth::PRIV_HIDE);
    	});
    		
    }
    
    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->object = new GedcomRecord(self::$gedcomrecord_mock);
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     */
    protected function tearDown()
    {
    }    

    public function testClassExists() {
    	$this->assertTrue(class_exists('\MyArtJaub\Webtrees\GedcomRecord'));
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::getDerivedRecord
     */
    public function testGetDerivedRecord()
    {		
    	$this->assertInstanceOf('\Fisharebest\Webtrees\GedcomRecord', $this->object->getDerivedRecord());
		$this->assertEquals(self::$gedcomrecord_xref, $this->object->getDerivedRecord()->getXref());	
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::isNewAddition
     */
    public function testIsNewAddition()
    {    	
    	$this->assertFalse($this->object->isNewAddition());
    	
    	//$gedcomrecord_new_mock = m::mock('\Fisharebest\Webtrees\GedcomRecord', array('I456', null, '1 BIRT Y', self::$tree_mock));
    	$gedcomrecord_new = new \Fisharebest\Webtrees\GedcomRecord('I456', null, '1 BIRT Y', self::$tree_mock);
    	$dnewgedrec = new \MyArtJaub\Webtrees\GedcomRecord($gedcomrecord_new);
    	
    	$this->assertTrue($dnewgedrec->isNewAddition());    	
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::format_first_major_fact
     * @todo   Implement testFormat_first_major_fact().
     */
    public function testFormat_first_major_fact()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::canDisplayIsSourced
     * @todo   Implement testCanDisplayIsSourced().
     */
    public function testCanDisplayIsSourced()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::isSourced
     * @todo add cases which returns -1 and 1
     */
    public function testIsSourced()
    {
    	$this->assertEquals(2, $this->object->isSourced());
    }

    /**
     * @covers MyArtJaub\Webtrees\GedcomRecord::isFactSourced
     * @todo   Implement testIsFactSourced().
     */
    public function testIsFactSourced()
    {
        // Remove the following lines when you implement this test.
        $this->markTestIncomplete(
            'This test has not been implemented yet.'
        );
    }
}
